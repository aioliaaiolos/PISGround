//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3623
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UnitTests.MissionService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.CollectionDataContractAttribute(Name="ElementAvailableElementDataList", Namespace="http://alstom.com/pacis/pis/schema/", ItemName="AvailableElementData")]
    [System.SerializableAttribute()]
    public class ElementAvailableElementDataList : System.Collections.Generic.List<PIS.Ground.Core.Data.AvailableElementData> {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://alstom.com/pacis/pis/ground/mission/", ConfigurationName="MissionService.IMissionService")]
    public interface IMissionService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://alstom.com/pacis/pis/ground/mission/IMissionService/RetrieveElementList", ReplyAction="http://alstom.com/pacis/pis/ground/mission/IMissionService/RetrieveElementListRes" +
            "ponse")]
        UnitTests.MissionService.ElementAvailableElementDataList RetrieveElementList(System.Guid sessionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://alstom.com/pacis/pis/ground/mission/IMissionService/InitializeAutomaticMis" +
            "sion", ReplyAction="http://alstom.com/pacis/pis/ground/mission/IMissionService/InitializeAutomaticMis" +
            "sionResponse")]
        PIS.Ground.Mission.MissionServiceResult InitializeAutomaticMission(System.Guid sessionId, PIS.Ground.Core.Data.AutomaticModeRequest automaticModeRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://alstom.com/pacis/pis/ground/mission/IMissionService/InitializeModifiedMiss" +
            "ion", ReplyAction="http://alstom.com/pacis/pis/ground/mission/IMissionService/InitializeModifiedMiss" +
            "ionResponse")]
        PIS.Ground.Mission.MissionServiceResult InitializeModifiedMission(System.Guid sessionId, PIS.Ground.Core.Data.ModifiedModeRequest modifiedModeRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://alstom.com/pacis/pis/ground/mission/IMissionService/InitializeManualMissio" +
            "n", ReplyAction="http://alstom.com/pacis/pis/ground/mission/IMissionService/InitializeManualMissio" +
            "nResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(PIS.Ground.Core.Data.ModifiedModeRequest))]
        PIS.Ground.Mission.MissionServiceResult InitializeManualMission(System.Guid sessionId, PIS.Ground.Core.Data.ManualModeRequest manualModeRequest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://alstom.com/pacis/pis/ground/mission/IMissionService/StopMission", ReplyAction="http://alstom.com/pacis/pis/ground/mission/IMissionService/StopMissionResponse")]
        PIS.Ground.Mission.MissionServiceResult StopMission(System.Guid sessionId, bool onBoardValidationFlag, string elementAlphaNumber, string missionId, uint timeOut);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public interface IMissionServiceChannel : UnitTests.MissionService.IMissionService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
    public partial class MissionServiceClient : System.ServiceModel.ClientBase<UnitTests.MissionService.IMissionService>, UnitTests.MissionService.IMissionService {
        
        public MissionServiceClient() {
        }
        
        public MissionServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MissionServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MissionServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MissionServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public UnitTests.MissionService.ElementAvailableElementDataList RetrieveElementList(System.Guid sessionId) {
            return base.Channel.RetrieveElementList(sessionId);
        }
        
        public PIS.Ground.Mission.MissionServiceResult InitializeAutomaticMission(System.Guid sessionId, PIS.Ground.Core.Data.AutomaticModeRequest automaticModeRequest) {
            return base.Channel.InitializeAutomaticMission(sessionId, automaticModeRequest);
        }
        
        public PIS.Ground.Mission.MissionServiceResult InitializeModifiedMission(System.Guid sessionId, PIS.Ground.Core.Data.ModifiedModeRequest modifiedModeRequest) {
            return base.Channel.InitializeModifiedMission(sessionId, modifiedModeRequest);
        }
        
        public PIS.Ground.Mission.MissionServiceResult InitializeManualMission(System.Guid sessionId, PIS.Ground.Core.Data.ManualModeRequest manualModeRequest) {
            return base.Channel.InitializeManualMission(sessionId, manualModeRequest);
        }
        
        public PIS.Ground.Mission.MissionServiceResult StopMission(System.Guid sessionId, bool onBoardValidationFlag, string elementAlphaNumber, string missionId, uint timeOut) {
            return base.Channel.StopMission(sessionId, onBoardValidationFlag, elementAlphaNumber, missionId, timeOut);
        }
    }
}
